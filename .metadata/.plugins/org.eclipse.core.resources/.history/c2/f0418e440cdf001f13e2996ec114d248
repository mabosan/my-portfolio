package main;

import entity.Entity;

public class CollisionChecker {

	GamePanel gamePanel;
	
	public CollisionChecker(GamePanel gamePanel) {
		this.gamePanel = gamePanel;
	}
	
	public void checkTile(Entity entity) {
		
		int entityLeftWorldX = entity.characterX + entity.solidArea.x;
		int entityRightWorldX = entity.characterX + entity.solidArea.x + entity.solidArea.width;
		int entityTopWorldY = entity.characterY + entity.solidArea.y;
		int entityBottomWorldY = entity.characterY + entity.solidArea.y + entity.solidArea.height;
		
		int entityLeftCol = entityLeftWorldX/gamePanel.tileSize;
		int entityRightCol = entityRightWorldX/gamePanel.tileSize;
		int entityTopRow = entityTopWorldY/gamePanel.tileSize;
		int entityBottomRow = entityBottomWorldY/gamePanel.tileSize;
		
		int tileNum1, tileNum2;
		
		switch(entity.direction) {
		case "up":
			entityTopRow = (entityTopWorldY - entity.characterSpeed)/gamePanel.tileSize;
			// 衝突エリアの左角のチェック
			tileNum1 = gamePanel.tileManager.mapTileNum[entityLeftCol][entityTopRow];
			// 衝突エリアの右角のチェック
			tileNum2 = gamePanel.tileManager.mapTileNum[entityRightCol][entityTopRow];
			if(gamePanel.tileManager.tile[tileNum1].collision == true || gamePanel.tileManager.tile[tileNum2].collision == true) {
				entity.collisionOn = true;
			}
			break;
		case "down":
			entityBottomRow = (entityBottomWorldY - entity.characterSpeed)/gamePanel.tileSize;
			// 衝突エリアの左角のチェック
			tileNum1 = gamePanel.tileManager.mapTileNum[entityLeftCol][entityBottomRow];
			// 衝突エリアの右角のチェック
			tileNum2 = gamePanel.tileManager.mapTileNum[entityRightCol][entityBottomRow];
			if(gamePanel.tileManager.tile[tileNum1].collision == true || gamePanel.tileManager.tile[tileNum2].collision == true) {
				entity.collisionOn = true;
			}
			break;
		case "left":
			entityLeftCol = (entityTopWorldY - entity.characterSpeed)/gamePanel.tileSize;
			// 衝突エリアの左角のチェック
			tileNum1 = gamePanel.tileManager.mapTileNum[entityLeftCol][entityTopRow];
			// 衝突エリアの右角のチェック
			tileNum2 = gamePanel.tileManager.mapTileNum[entityRightCol][entityTopRow];
			if(gamePanel.tileManager.tile[tileNum1].collision == true || gamePanel.tileManager.tile[tileNum2].collision == true) {
				entity.collisionOn = true;
			}
			break;
		case "right":
			entityTopRow = (entityTopWorldY - entity.characterSpeed)/gamePanel.tileSize;
			// 衝突エリアの左角のチェック
			tileNum1 = gamePanel.tileManager.mapTileNum[entityLeftCol][entityTopRow];
			// 衝突エリアの右角のチェック
			tileNum2 = gamePanel.tileManager.mapTileNum[entityRightCol][entityTopRow];
			if(gamePanel.tileManager.tile[tileNum1].collision == true || gamePanel.tileManager.tile[tileNum2].collision == true) {
				entity.collisionOn = true;
			}
			break;
		}
	}
}
